https://commons.wikimedia.org/wiki/File:Excerpt_from_Steamboat_Willie_(1928),_used_as_part_of_Walt_Disney_Animation_Studios_Logo.gif

https://ezgif.com/optimize
* crop    - left 36, top 0, width 360, height 360
* frames  - retain 44-98 with 5ms delay
* resize  - width 64, height 64
* effects - brightness 5, contrast 25, sharpen 1
* split   - png
download zip then extract to ./source/

```bash
mogrify -dither FloydSteinberg -remap ./converter/fixtures/palette.png -path ./converter/input/ ./source/*.png
cd converter
go test ./... --cover
for f in ./input/*.png; do go run cmd/png2text/main.go -source=$f; done
```

-----

hex encode the pixel color arrays using this function:

```js
const pixelColorsToHexString = (pixelColors) => {
  let hexString = '';
  pixelColors.forEach((value) => {
    if (value < 0 || value > 15) {
      hexString += 'f';
    } else {
      hexString += value.toString(16);
    }
  });
  return hexString;
}
```

then use the hex strings in a fc64js rom with custom palette: ```romPalette = [0x000000, 0x222222, 0x444444, 0x666666, 0x888888, 0xaaaaaa, 0xcccccc, 0xeeeeee];```

along with a hex string decode function:

```js
const hexStringToPixelColors = (hexString) => {
  const pixelColors = [];
  for (const hexDigit of hexString) {
    if (hexDigit === 'f') {
      pixelColors.push(-1);
    } else {
      pixelColors.push(parseInt(hexDigit, 16));
    }
  }
  return pixelColors;
}
```

-----

alternatively, base64 encode/decode using these functions to further reduce the file size:

```js
const pixelColorsToB64String = (pixelColors) => {
  let binaryString = '';
  for (let i = 0; i < pixelColors.length; i += 2) {
    const pixel1 = (pixelColors[i] < 0 || pixelColors[i] > 15) ? 15 : pixelColors[i];
    const pixel2 = (i + 1 >= pixelColors.length || pixelColors[i + 1] < 0 || pixelColors[i + 1] > 15) ? 15 : pixelColors[i + 1];
    const byte = (pixel1 << 4) | pixel2;
    binaryString += String.fromCharCode(byte);
  }
  const base64String = btoa(binaryString);
  return base64String.replaceAll('=', '');
}

const b64StringToPixelColors = (b64String) => {
  const padCount = Math.ceil(b64String.length / 4) * 4;
  const b64StringPadded = b64String.padEnd(padCount, '=');
  const binaryString = atob(b64StringPadded);
  const pixelColors = [];
  for (let i = 0; i < binaryString.length; i++) {
    const byte = binaryString.charCodeAt(i);
    let pixel1 = (byte >> 4) & 0b00001111;
    let pixel2 = byte & 0b00001111;
    pixelColors.push(pixel1 === 15 ? -1 : pixel1, pixel2 === 15 ? -1 : pixel2);
  }
  return pixelColors;
}
```

-----

The fact that a video redraws the entire screen each frame and there is no need for transparent pixel support does offer a possibility for further reduction in file size without resorting to "real" compression (only 3 rgb bits not 4 rgba bits needed per pixel). I won't be pursuing this as I think a simple generic function that supports transparency (and maybe a wider palette in future) is the better fit for fc64js. The real limiting factors are the console's tiny color palette, low resolution, and minimal beeper... fc64js isn't really suited for use as a multimedia player, so this is probably not an area that warrants any more investigation. It has been a fun diversion though :)
