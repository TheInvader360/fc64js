export type fontDefinition = {
  charWidth: number;
  charHeight: number;
  charTrackingDefault: number;
  charMap: number[][]; // characters defined in ascii code order from 32 (space) to 126 (tilde)
};

export const defaultFont: fontDefinition = {
  charWidth: 3,
  charHeight: 5,
  charTrackingDefault: 1,
  charMap: [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // space
    [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0], // ! exclamation mark
    [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], // " double quote
    [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], // # hash
    [0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0], // $ dollar
    [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1], // % percent
    [1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1], // & ampersand
    [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // ' single quote
    [0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1], // ( left bracket
    [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0], // ) right bracket
    [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0], // * asterisk
    [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0], // + plus
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], //0, comma
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0], // - minus
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], // . full stop
    [0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0], // / slash
    [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], // 0
    [0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], // 1
    [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1], // 2
    [1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1], // 3
    [1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1], // 4
    [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], // 5
    [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], // 6
    [1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1], // 7
    [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], // 8
    [1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], // 9
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], // : colon
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], // ; semicolon
    [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], // < less than
    [0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0], // = equals
    [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0], // > more than
    [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0], // ? question mark
    [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1], // @ at
    [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], // A
    [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1], // B
    [1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], // C
    [1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0], // D
    [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1], // E
    [1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0], // F
    [1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], // G
    [1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], // H
    [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1], // I
    [0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1], // J
    [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], // K
    [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1], // L
    [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1], // M
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1], // N
    [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], // O
    [1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0], // P
    [1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], // Q
    [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], // R
    [1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], // S
    [1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], // T
    [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1], // U
    [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0], // V
    [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1], // W
    [1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1], // X
    [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0], // Y
    [1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1], // Z
    [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], // [ left square bracket
    [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1], // \ backslash
    [1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0], // ] right square bracket
    [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], // ^ caret
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], // _ underscore
    [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // ` backtick
    [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], // a
    [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], // b
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1], // c
    [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1], // d
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1], // e
    [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0], // f
    [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1], // g
    [0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], // h
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0], // i
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0], // j
    [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1], // k
    [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1], // l
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1], // m
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1], // n
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1], // o
    [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0], // p
    [0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1], // q
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0], // r
    [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0], // s
    [0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1], // t
    [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1], // u
    [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0], // v
    [0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1], // w
    [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], // x
    [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0], // y
    [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0], // z
    [0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1], // { left curly bracket
    [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0], // | pipe
    [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0], // } right curly bracket
    [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], // ~ tilde
  ],
};
